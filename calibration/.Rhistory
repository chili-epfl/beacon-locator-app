plot(mtcars$gearMode,resid(fitman))
plot(mtcars$wt,resid(fitman))
summary(fitman)
fitall <- lm(mpg ~ . - am, data=mtcars)
summary(fitall)$coef
summary(fitall)
fit2 <- lm(mpg ~ gearMode+wt, data=mtcars)
summary(fit2)$coef
summary(fit2)
fit3 <- lm(mpg~gearMode+wt+hp)
fit3 <- lm(mpg~gearMode+wt+hp, data=mtcars)
summary(fit3)
fit3 <- lm(mpg~gearMode*wt+hp, data=mtcars)
fit3 <- lm(mpg~gearMode*wt*hp, data=mtcars)
summary(fit3)
fit3 <- lm(mpg~gearMode+wt+hp, data=mtcars)
fit5 <- lm(mpg~gearMode+wt+hp+drat+disp, data=mtcars)
summary(fit3)
summary(fit5)
plot(predict(fit3),resid(fit))
plot(predict(fit3),resid(fit3))
plot(predict(fitall),resid(fitall))
plot(predict(fitman),resid(fitman))
anova(fitman,fit2,fit3,fit5)
anova(fitman,fit2,fit3,fit5,fitall)
str(fitman)
?lm
summary(fitman)
fitwt <- lm(mpg ~ wt, data=mtcars)
summary(fitwt)
summary(fitman)
str(summary(fitman))
predict(fit3, mtcars, interval = "confidence")
predict(fit3, mtcars, interval = "prediction")
meanCar <- colMeans(mtcars)
meanCar <- colMeans(as.numeric(mtcars))
str(mtcars)
?colsum
mtcars[nrow(mtcars)+1,"wt"] <- mean(mtcars$wt)
mtcars[nrow(mtcars)+1,"hp"] <- mean(mtcars$hp)
mtcars[nrow(mtcars)+1,"gearMode"] <- "Automatic"
mtcars[nrow(mtcars)+2,"wt"] <- mean(mtcars$wt)
mtcars[nrow(mtcars)+2,"hp"] <- mean(mtcars$hp)
mtcars[nrow(mtcars)+2,"gearMode"] <- "Manual"
View(mtcars)
data(mtcars)
mtcars$gearMode <- factor(mtcars$am, labels=c("Automatic","Manual"))
summary(lm(mpg~gearMode+drat))
summary(lm(mpg~gearMode+drat,data=mtcars))
summary(lm(mpg~gearMode+vs,data=mtcars))
summary(lm(mpg~gearMode+gear,data=mtcars))
summary(lm(mpg~gearMode+drat+vs,data=mtcars))
sqrt(vif(lm(mpg~gearMode+drat+vs,data=mtcars)))
?vif
??vif
library(car)
sqrt(vif(lm(mpg~gearMode+drat+vs,data=mtcars)))
fitman <- lm(mpg ~ gearMode, data=mtcars)
fit2 <- lm(mpg ~ gearMode+wt, data=mtcars)
fit3 <- lm(mpg ~ gearMode+wt+hp, data=mtcars)
fit4 <- lm(mpg ~ gearMode+wt+hp+disp, data=mtcars)
fit5 <- lm(mpg ~ gearMode+wt+hp+disp+drat, data=mtcars)
fitall <- lm(mpg ~ . - am, data=mtcars)
sqrt(vif(fit3))
an <- anova(fitman,fit2,fit3,fit4,fit5,fitall)
View(an)
str(an)
summary(an)
an
names(mtcars)
?row.name
?row.names
row.names(mtcars)
averages <- data.frame(row.names=c("Average Auto","Average Manual"), hp=c(mean(mtcars$hp),mean(mtcars$hp)), wt=c(mean(mtcars$wt),mean(mtcars$wt)), gearMode=as.factor("Automatic","Manual"))
averages <- data.frame(row.names=c("Average Auto","Average Manual"), hp=c(mean(mtcars$hp),mean(mtcars$hp)), wt=c(mean(mtcars$wt),mean(mtcars$wt)), gearMode=as.factor(c("Automatic","Manual")))
View(averages)
predict(fit3,averages,interval="confidence")
predict(fit3,averages,interval="prediction")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year, data=hunger)
summary(fit)$coef
lmF <- lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric~Year,data=hunger[hunger$Sex=="Female",])
lmF <-
| lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)\
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- lm(y~x,out2[-1,])
plot(fit,which=1)
plot(fitno,which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)/resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/fit$df)
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit, which=2)
sqrt(deviance(fitno)/resid(fitno)$df)
sqrt(deviance(fitno)/fitno$df)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno,out2)-predict(fit,out2)
dy <- predict(fitno,out2)-predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
data(mtcars)
fit3 <- lm(mpg~gearMode+wt+hp)
fit3 <- lm(mpg~gearMode+wt+hp,mtcars)
mtcars$gearMode <- factor(mtcars$am,levels=c("Auto","Manual"))
fit3 <- lm(mpg~gearMode+wt+hp,mtcars)
mtcars$gearMode <- factor(mtcars$am,labels=c("Auto","Manual"))
fit3 <- lm(mpg~gearMode+wt+hp,mtcars)
View(mtcars)
summary(fit3)
plot(fit3,which=5)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swis)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility~.-Examination,swiss)
vif(mdl2)
exit
library(MASS)
?shuttle
head(shuttle)
str(shuttle)
str(shuttle$use)
shuttle$use
numeric(shuttle$use)
as.numeric(shuttle$use)
?relevel
shuttle$NumUse[shuttle$use=="auto"] <- 1
shuttle$NumUse[shuttle$use=="noauto"] <- 0
View(shuttle)
windLogReg <- glm(NumUse ~ wind, data=shuttle, family="binomial")
summary(windLogReg)
?predict
topredict <- rbind(shuttle,data.frame(wind=c("head","tail")))
shuttle[nrow(shuttle)+1,"wind"] <- "head"
shuttle[nrow(shuttle)+1,"wind"] <- "tail"
View(shuttle)
predict(shuttle,windLogReg)
predict(windLogReg,shuttle)
str(predict(windLogReg,shuttle))
exp(predict(windLogReg,shuttle))
probHead <-  exp(0.251)/(1+exp(0.251))
probTail <- exp(0.283)/(1+exp(0.283))
exp(0.25131)
probHead <-  exp(0.251)/(1+exp(0.251))
0.5624/(1-0.5624)
(1-0.5624)/0.5624
summary(windLogReg)
exp(0.25131)
1.285714/1.327273
windLogReg3 <- glm(NumUse ~ wind+magn, data=shuttle, family="binomial")
windLogReg2 <- glm(NumUse ~ wind+magn, data=shuttle, family="binomial")
exp(predict(windLogReg2,shuttle))
str(shuttle)
shuttle[257,"magn"] <- "Medium"
shuttle[258,"magn"] <- "Medium"
exp(predict(windLogReg2,shuttle))
1.438368/1.485153
shuttle[258,"magn"] <- "Light"
shuttle[257,"magn"] <- "Light"
exp(predict(windLogReg2,shuttle))
data(InsectSprays)
str(InsectSprays)
sprayLR <- glm(count ~ spray,data=InsectSprays, family="poisson")
summary(sprayLR)
InsectSprays[nrow(InsectSprays)+1,"spray"] <- "A"
InsectSprays[nrow(InsectSprays)+1,"spray"] <- "B"
predict(sprayLR,InsectSprays)
summary(sprayLR)
exp(2.67415)/exp(2.7300291)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
positive <- data.frame(x=x[6:11],y=y[6:11])
View(positive)
lin <- lm(y~x,data=positive)
summary(lin)
plot(x,y,data=positive)
plot(positive$x,positive$y)
positive <- positive[2:6,]
lin <- lm(y~x,data=positive)
summary(lin)
swirl()
library(swirl)
swirl()
x1c <- simbias()
apply(x1c, 1, mean)
fit1(Fertility~Agriculture,data=swiss)
fit1 <- lm(Fertility~Agriculture,data=swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education,data=swiss)
anova(fit1,fit3)
deviance(fi3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43)
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,family="binomial",ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-glm(visits~date,poisson,hits, offset=log(visits+1))
mdl2<-glm(simplystats~date,poisson,hits, offset=log(visits+1))
qpois(.95,mdl2$fitted.values[704])
sum(dbinom(4:20,20,0.1))
dbinom(1,5,0.2)
dbinom(2,10,0.1)
dbinom(2,10,0.2)
num<-dbinom(3,15,0.1)
den<-num+dbinom(3,15,0.2)
num/den
num<-dbinom(4,20,0.1)
den<-num+dbinom(4,20,0.2)
num/den
.75*.75
sqrt(.92)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
head(training)
plot(training$CompressiveStrength,1)
plot(training$CompressiveStrength)
training$newFlyAsh <- cut2(training$FlyAsh,g=5)
library(Hmisc)
install.packages("Hmisc")
training$newFlyAsh <- cut2(training$FlyAsh,g=5)
library(Hmisc)
training$newFlyAsh <- cut2(training$FlyAsh,g=5)
summary(training)
qplot(training$CompressiveStrength,col=newFlyAsh)
qplot(training$CompressiveStrength,col=training$newFlyAsh)
qplot(training$CompressiveStrength~1,col=training$newFlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=training$newFlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$Cement,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$BlastFurnaceSlag,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$Water,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$Superplasticizer,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$CoarseAggregate,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$FineAggregate,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$Age,g=5))
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,col=cut2(training$FlyAsh,g=5))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
summary(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(testing)
?strcat
?grep
grep("^IL",names(testing))
names(testing)[grep("^IL",names(testing))]
subtest <- testing[,grep("^IL",names(testing))]
View(subtest)
preProc <- preProcess(subtest,method="pca",pcaComp=5)
trainPC <- predict(preProc,subtest)
summary(preProc)
preProc
var(subtest)
?var
sum(diag(var(subtest)))
View(trainPC)
sum(diag(var(trainPC)))
diag(var(trainPC))
diag(var(subtest))
preProc <- preProcess(subtest,method="pca",thresh=0.9)
preProc
preProc <- preProcess(subtest,method="pca",thresh=0.7)
preProc
preProc <- preProcess(subtest,method="pca",thresh=0.93)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(testing)
subtest <- testing[,c(1,grep("^IL",names(testing)))]
head(subtest)
modelFit <- train(training$diagnosis~.,method="glm",data=training)
modelFit <- train(subtest$diagnosis~.,method="glm",data=subtest)
modelFit <- train(diagnosis~.,method="glm",data=subtest)
install.packages("e1071")
library(e1071)
modelFit <- train(diagnosis~.,method="glm",data=subtest)
subtrain <- training[,c(grep("^IL",names(training)))]
preProc <- preProcess(subtrain,method="pca",thresh=0.9)
preProc
subtrain <- training[,c(1,grep("^IL",names(training)))]
subtest <- testing[,c(1,grep("^IL",names(testing)))]
modelFit <- train(diagnosis~.,method="glm",data=subtrain)
confusionMatrix(subtest$diagnosis,predict(modelFit,subtest))
modelFit <- train(diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=subtrain)
?train
preProc <- preProcess(subtrain[,-diagnosis],method="pca",thresh=0.8)
View(subtrain)
preProc <- preProcess(subtrain[,-c("diagnosis")],method="pca",thresh=0.8)
preProc <- preProcess(subtrain[,-"diagnosis"],method="pca",thresh=0.8)
preProc <- preProcess(subtrain[,-1],method="pca",thresh=0.8)
trainPC <- predict(preProc,subtrain[,-1])
View(trainPC)
modelFit <- train(subtrain$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testSet[,-1])
testPC <- predict(preProc,subtest[,-1])
confusionMatrix(subtest$diagnosis,predict(modelFit,testPC))
beacons <- data.frame(beaconNr=1:6,beaconID=c("2982-17929","11667-6916","33875-41478","33198-27248","62375-26168","55326-46713"),beaconX=c(0,-2,-2,2,3,3.4),beaconY=c(0,2.7,6.4,8.9,5.8,1.8))
require(rjson)
require(plyr)
require(plotrix)
require(hydroGOF)
require(ggplot2)
ROOMSIZE <- 9
lines <- paste(readLines("run1-1431699239827.json"),collapse="")
lines <- gsub("[]", "", lines, fixed=T)
lines <- gsub("][", ",", lines, fixed=T)
json_data <- fromJSON(lines)
df <- ldply(json_data, data.frame)
mintime <- min(df$timestamp)
df$reltime <- (df$timestamp - mintime)
realXseries = c(rep(0,times=10),
seq(from=0,to=-2,length.out=5),
rep(-2,times=10),
seq(from=-2,to=-2,length.out=5),
rep(-2,times=10),
seq(from=-2,to=2,length.out=5),
rep(2,times=10),
seq(from=2,to=3,length.out=5),
rep(3,times=10),
seq(from=3,to=3.4,length.out=5),
rep(3.4,times=10),
seq(from=3.4,to=0,length.out=5),
rep(0,times=10),
0
)
realYseries = c(rep(0,times=10),
seq(from=0,to=2.7,length.out=5),
rep(2.7,times=10),
seq(from=2.7,to=6.4,length.out=5),
rep(6.4,times=10),
seq(from=6.4,to=8.9,length.out=5),
rep(8.9,times=10),
seq(from=8.9,to=5.8,length.out=5),
rep(5.8,times=10),
seq(from=5.8,to=1.8,length.out=5),
rep(1.8,times=10),
seq(from=1.8,to=0,length.out=5),
rep(0,times=10),
0
)
df$realX = NA
df$realY = NA
for(i in 1:length(realXseries)){
df[round(df$reltime/1000)==(i-1),"realX"] = realXseries[i]
df[round(df$reltime/1000)==(i-1),"realY"] = realYseries[i]
}
summary(df)
setwd("~/workspace/beacon-locator-app/calibration")
source('~/.active-rstudio-document', echo=TRUE)
beacons <- data.frame(beaconNr=1:6,beaconID=c("2982-17929","11667-6916","33875-41478","33198-27248","62375-26168","55326-46713"),beaconX=c(0,-2,-2,2,3,3.4),beaconY=c(0,2.7,6.4,8.9,5.8,1.8))
ROOMSIZE <- 9
lines <- paste(readLines("run1-1431699239827.json"),collapse="")
lines <- gsub("[]", "", lines, fixed=T)
lines <- gsub("][", ",", lines, fixed=T)
json_data <- fromJSON(lines)
df <- ldply(json_data, data.frame)
mintime <- min(df$timestamp)
df$reltime <- (df$timestamp - mintime)
realXseries = c(rep(0,times=10),
seq(from=0,to=-2,length.out=5),
rep(-2,times=10),
seq(from=-2,to=-2,length.out=5),
rep(-2,times=10),
seq(from=-2,to=2,length.out=5),
rep(2,times=10),
seq(from=2,to=3,length.out=5),
rep(3,times=10),
seq(from=3,to=3.4,length.out=5),
rep(3.4,times=10),
seq(from=3.4,to=0,length.out=5),
rep(0,times=10),
0
)
realYseries = c(rep(0,times=10),
seq(from=0,to=2.7,length.out=5),
rep(2.7,times=10),
seq(from=2.7,to=6.4,length.out=5),
rep(6.4,times=10),
seq(from=6.4,to=8.9,length.out=5),
rep(8.9,times=10),
seq(from=8.9,to=5.8,length.out=5),
rep(5.8,times=10),
seq(from=5.8,to=1.8,length.out=5),
rep(1.8,times=10),
seq(from=1.8,to=0,length.out=5),
rep(0,times=10),
0
)
df$realX = NA
df$realY = NA
for(i in 1:length(realXseries)){
df[round(df$reltime/1000)==(i-1),"realX"] = realXseries[i]
df[round(df$reltime/1000)==(i-1),"realY"] = realYseries[i]
}
summary(df)
dfsmooth <- data.frame()
for(i in beacons$beaconID){
subset <- df[df$beaconID==i,]
p <- ggplot(subset, aes(x=reltime,y=distance))+geom_line(col="blue",size=1)
smoothfit <- loess(distance~reltime,subset,span=0.15)
subset$newdistance <- predict(smoothfit,subset)
p + geom_line(data=subset, aes(x=reltime,y=newwdistance), col="red",size=1)
}
dfsmooth <- data.frame()
for(i in beacons$beaconID){
subset <- df[df$beaconID==i,]
p <- ggplot(subset, aes(x=reltime,y=distance))+geom_line(col="blue",size=1)
smoothfit <- loess(distance~reltime,subset,span=0.15)
subset$newdistance <- predict(smoothfit,subset)
print(p + geom_line(data=subset, aes(x=reltime,y=newwdistance), col="red",size=1))
print("more?")
line <- readline()
}
dfsmooth <- data.frame()
for(i in beacons$beaconID){
subset <- df[df$beaconID==i,]
p <- ggplot(subset, aes(x=reltime,y=distance))+geom_line(col="blue",size=1)
smoothfit <- loess(distance~reltime,subset,span=0.15)
subset$newdistance <- predict(smoothfit,subset)
print(p + geom_line(data=subset, aes(x=reltime,y=newdistance), col="red",size=1))
print("more?")
line <- readline()
}
